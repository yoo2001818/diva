// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
 
function join(d) {
  return d.join('');
}
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "selector_list", "symbols": ["_", "complex_selector_list", "_"], "postprocess": d => d[1]},
    {"name": "complex_selector_list$ebnf$1", "symbols": []},
    {"name": "complex_selector_list$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "complex_selector"]},
    {"name": "complex_selector_list$ebnf$1", "symbols": ["complex_selector_list$ebnf$1", "complex_selector_list$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_list", "symbols": ["complex_selector", "complex_selector_list$ebnf$1"], "postprocess": d => [d[0], ...d[1].map((v) => v[3])]},
    {"name": "compound_selector_list$ebnf$1", "symbols": []},
    {"name": "compound_selector_list$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "complex_selector"]},
    {"name": "compound_selector_list$ebnf$1", "symbols": ["compound_selector_list$ebnf$1", "compound_selector_list$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compound_selector_list", "symbols": ["compound_selector", "compound_selector_list$ebnf$1"]},
    {"name": "simple_selector_list$ebnf$1", "symbols": []},
    {"name": "simple_selector_list$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "simple_selector"]},
    {"name": "simple_selector_list$ebnf$1", "symbols": ["simple_selector_list$ebnf$1", "simple_selector_list$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "simple_selector_list", "symbols": ["simple_selector", "simple_selector_list$ebnf$1"]},
    {"name": "relative_selector_list$ebnf$1", "symbols": []},
    {"name": "relative_selector_list$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "relative_selector"]},
    {"name": "relative_selector_list$ebnf$1", "symbols": ["relative_selector_list$ebnf$1", "relative_selector_list$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "relative_selector_list", "symbols": ["relative_selector", "relative_selector_list$ebnf$1"]},
    {"name": "complex_selector$ebnf$1", "symbols": []},
    {"name": "complex_selector$ebnf$1$subexpression$1", "symbols": ["_", "combinator", "_", "compound_selector"]},
    {"name": "complex_selector$ebnf$1", "symbols": ["complex_selector$ebnf$1", "complex_selector$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector", "symbols": ["compound_selector", "complex_selector$ebnf$1"], "postprocess":  d => ({
          type: 'complexSelector',
          children: [d[0], ...d[1].flatMap((v) => ([v[1], v[3]]))],
        }) },
    {"name": "relative_selector$ebnf$1", "symbols": ["combinator"], "postprocess": id},
    {"name": "relative_selector$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "relative_selector", "symbols": ["relative_selector$ebnf$1", "_", "complex_selector"]},
    {"name": "compound_selector", "symbols": ["complex_selector_value"], "postprocess":  d => ({
          type: 'compoundSelector',
          children: d[0],
        }) },
    {"name": "complex_selector_value$ebnf$1", "symbols": []},
    {"name": "complex_selector_value$ebnf$1", "symbols": ["complex_selector_value$ebnf$1", "subclass_selector"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value$ebnf$2", "symbols": []},
    {"name": "complex_selector_value$ebnf$2$subexpression$1$ebnf$1", "symbols": []},
    {"name": "complex_selector_value$ebnf$2$subexpression$1$ebnf$1", "symbols": ["complex_selector_value$ebnf$2$subexpression$1$ebnf$1", "pseudo_class_selector"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value$ebnf$2$subexpression$1", "symbols": ["pseudo_element_selector", "complex_selector_value$ebnf$2$subexpression$1$ebnf$1"]},
    {"name": "complex_selector_value$ebnf$2", "symbols": ["complex_selector_value$ebnf$2", "complex_selector_value$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value", "symbols": ["type_selector", "complex_selector_value$ebnf$1", "complex_selector_value$ebnf$2"], "postprocess": d => [d[0], ...d[1], ...d[2].flatMap((v) => [v[0], ...v[1]])]},
    {"name": "complex_selector_value$ebnf$3", "symbols": ["subclass_selector"]},
    {"name": "complex_selector_value$ebnf$3", "symbols": ["complex_selector_value$ebnf$3", "subclass_selector"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value$ebnf$4", "symbols": []},
    {"name": "complex_selector_value$ebnf$4$subexpression$1$ebnf$1", "symbols": []},
    {"name": "complex_selector_value$ebnf$4$subexpression$1$ebnf$1", "symbols": ["complex_selector_value$ebnf$4$subexpression$1$ebnf$1", "pseudo_class_selector"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value$ebnf$4$subexpression$1", "symbols": ["pseudo_element_selector", "complex_selector_value$ebnf$4$subexpression$1$ebnf$1"]},
    {"name": "complex_selector_value$ebnf$4", "symbols": ["complex_selector_value$ebnf$4", "complex_selector_value$ebnf$4$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value", "symbols": ["complex_selector_value$ebnf$3", "complex_selector_value$ebnf$4"], "postprocess": d => [...d[0], ...d[1].flatMap((v) => [v[0], ...v[1]])]},
    {"name": "complex_selector_value$ebnf$5$subexpression$1$ebnf$1", "symbols": []},
    {"name": "complex_selector_value$ebnf$5$subexpression$1$ebnf$1", "symbols": ["complex_selector_value$ebnf$5$subexpression$1$ebnf$1", "pseudo_class_selector"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value$ebnf$5$subexpression$1", "symbols": ["pseudo_element_selector", "complex_selector_value$ebnf$5$subexpression$1$ebnf$1"]},
    {"name": "complex_selector_value$ebnf$5", "symbols": ["complex_selector_value$ebnf$5$subexpression$1"]},
    {"name": "complex_selector_value$ebnf$5$subexpression$2$ebnf$1", "symbols": []},
    {"name": "complex_selector_value$ebnf$5$subexpression$2$ebnf$1", "symbols": ["complex_selector_value$ebnf$5$subexpression$2$ebnf$1", "pseudo_class_selector"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value$ebnf$5$subexpression$2", "symbols": ["pseudo_element_selector", "complex_selector_value$ebnf$5$subexpression$2$ebnf$1"]},
    {"name": "complex_selector_value$ebnf$5", "symbols": ["complex_selector_value$ebnf$5", "complex_selector_value$ebnf$5$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complex_selector_value", "symbols": ["complex_selector_value$ebnf$5"], "postprocess": d => d[0].flatMap((v) => [v[0], ...v[1]])},
    {"name": "simple_selector", "symbols": ["type_selector"], "postprocess": id},
    {"name": "simple_selector", "symbols": ["subclass_selector"], "postprocess": id},
    {"name": "combinator", "symbols": ["combinator_type"], "postprocess": d => ({ type: 'combinator', name: d[0] })},
    {"name": "combinator_type", "symbols": [{"literal":">"}], "postprocess": id},
    {"name": "combinator_type", "symbols": [{"literal":"+"}], "postprocess": id},
    {"name": "combinator_type", "symbols": [{"literal":"~"}], "postprocess": id},
    {"name": "combinator_type$string$1", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "combinator_type", "symbols": ["combinator_type$string$1"], "postprocess": id},
    {"name": "combinator_type", "symbols": [/[\s]/], "postprocess": () => " "},
    {"name": "type_selector", "symbols": ["wq_name"], "postprocess": d => ({ type: 'typeSelector', name: d[0] })},
    {"name": "type_selector$ebnf$1", "symbols": ["ns_prefix"], "postprocess": id},
    {"name": "type_selector$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "type_selector", "symbols": ["type_selector$ebnf$1", {"literal":"*"}], "postprocess": d => ({ type: 'typeSelector', name: join(d) })},
    {"name": "ns_prefix$ebnf$1$subexpression$1", "symbols": ["ident_token"]},
    {"name": "ns_prefix$ebnf$1$subexpression$1", "symbols": [{"literal":"*"}]},
    {"name": "ns_prefix$ebnf$1", "symbols": ["ns_prefix$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ns_prefix$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ns_prefix", "symbols": ["ns_prefix$ebnf$1", {"literal":"|"}], "postprocess": join},
    {"name": "wq_name$ebnf$1", "symbols": ["ns_prefix"], "postprocess": id},
    {"name": "wq_name$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "wq_name", "symbols": ["wq_name$ebnf$1", "ident_token"], "postprocess": join},
    {"name": "subclass_selector", "symbols": ["id_selector"], "postprocess": id},
    {"name": "subclass_selector", "symbols": ["class_selector"], "postprocess": id},
    {"name": "subclass_selector", "symbols": ["attribute_selector"], "postprocess": id},
    {"name": "subclass_selector", "symbols": ["pseudo_class_selector"], "postprocess": id},
    {"name": "id_selector", "symbols": ["hash_token"], "postprocess": d => ({ type: 'idSelector', name: d[0] })},
    {"name": "class_selector", "symbols": [{"literal":"."}, "ident_token"], "postprocess": d => ({ type: 'classSelector', name: d[1] })},
    {"name": "attribute_selector", "symbols": [{"literal":"["}, "wq_name", {"literal":"]"}], "postprocess": d => ({ type: 'attributeSelector', name: d[1] })},
    {"name": "attribute_selector$ebnf$1", "symbols": ["attr_modifier"], "postprocess": id},
    {"name": "attribute_selector$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "attribute_selector", "symbols": [{"literal":"["}, "wq_name", "attr_matcher", "string_or_ident", "attribute_selector$ebnf$1", {"literal":"]"}], "postprocess": d => ({ type: 'attributeSelector', name: d[1], matcher: d[2], value: d[3], modifier: d[4] })},
    {"name": "attr_matcher$ebnf$1$subexpression$1", "symbols": [{"literal":"~"}]},
    {"name": "attr_matcher$ebnf$1$subexpression$1", "symbols": [{"literal":"|"}]},
    {"name": "attr_matcher$ebnf$1$subexpression$1", "symbols": [{"literal":"^"}]},
    {"name": "attr_matcher$ebnf$1$subexpression$1", "symbols": [{"literal":"$"}]},
    {"name": "attr_matcher$ebnf$1$subexpression$1", "symbols": [{"literal":"*"}]},
    {"name": "attr_matcher$ebnf$1", "symbols": ["attr_matcher$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "attr_matcher$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "attr_matcher", "symbols": ["attr_matcher$ebnf$1", {"literal":"="}], "postprocess": join},
    {"name": "attr_modifier", "symbols": [{"literal":"i"}], "postprocess": id},
    {"name": "attr_modifier", "symbols": [{"literal":"s"}], "postprocess": id},
    {"name": "string_or_ident", "symbols": ["string_token"], "postprocess": id},
    {"name": "string_or_ident", "symbols": ["ident_token"], "postprocess": id},
    {"name": "pseudo_class_selector", "symbols": [{"literal":":"}, "ident_token"], "postprocess": d => ({ type: 'pseudoSelector', name: d[1] })},
    {"name": "pseudo_class_selector$ebnf$1", "symbols": [/[^)]/]},
    {"name": "pseudo_class_selector$ebnf$1", "symbols": ["pseudo_class_selector$ebnf$1", /[^)]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pseudo_class_selector", "symbols": [{"literal":":"}, "function_token", "pseudo_class_selector$ebnf$1", {"literal":")"}], "postprocess": d => ({ type: 'pseudoSelector', name: d[1] + '(' + d[2].join('') + d[3] })},
    {"name": "pseudo_element_selector", "symbols": [{"literal":":"}, "pseudo_class_selector"], "postprocess": id},
    {"name": "function_token", "symbols": ["ident_token", {"literal":"("}], "postprocess": id},
    {"name": "at_keyword_token", "symbols": [{"literal":"@"}, "ident_token"]},
    {"name": "string_token$ebnf$1", "symbols": []},
    {"name": "string_token$ebnf$1$subexpression$1", "symbols": [/[^"\\\n]/]},
    {"name": "string_token$ebnf$1$subexpression$1", "symbols": ["escape"]},
    {"name": "string_token$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"\\"}, {"literal":"\n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "string_token$ebnf$1$subexpression$1", "symbols": ["string_token$ebnf$1$subexpression$1$string$1"]},
    {"name": "string_token$ebnf$1", "symbols": ["string_token$ebnf$1", "string_token$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string_token", "symbols": [{"literal":"\""}, "string_token$ebnf$1", {"literal":"\""}], "postprocess": d => d[1].join('')},
    {"name": "string_token$ebnf$2", "symbols": []},
    {"name": "string_token$ebnf$2$subexpression$1", "symbols": [/[^'\\\n]/]},
    {"name": "string_token$ebnf$2$subexpression$1", "symbols": ["escape"]},
    {"name": "string_token$ebnf$2$subexpression$1$string$1", "symbols": [{"literal":"\\"}, {"literal":"\n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "string_token$ebnf$2$subexpression$1", "symbols": ["string_token$ebnf$2$subexpression$1$string$1"]},
    {"name": "string_token$ebnf$2", "symbols": ["string_token$ebnf$2", "string_token$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string_token", "symbols": [{"literal":"'"}, "string_token$ebnf$2", {"literal":"'"}], "postprocess": d => d[1].join('')},
    {"name": "url_token$string$1", "symbols": [{"literal":"u"}, {"literal":"r"}, {"literal":"l"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "url_token$ebnf$1", "symbols": []},
    {"name": "url_token$ebnf$1$subexpression$1", "symbols": [/[^"'()\\\s]/]},
    {"name": "url_token$ebnf$1$subexpression$1", "symbols": ["escape"]},
    {"name": "url_token$ebnf$1", "symbols": ["url_token$ebnf$1", "url_token$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "url_token", "symbols": ["url_token$string$1", "_", "url_token$ebnf$1", "_", {"literal":")"}]},
    {"name": "number_token$ebnf$1$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "number_token$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "number_token$ebnf$1", "symbols": ["number_token$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "number_token$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number_token$subexpression$1$ebnf$1", "symbols": []},
    {"name": "number_token$subexpression$1$ebnf$1", "symbols": ["number_token$subexpression$1$ebnf$1", "digit"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number_token$subexpression$1$ebnf$2", "symbols": ["digit"]},
    {"name": "number_token$subexpression$1$ebnf$2", "symbols": ["number_token$subexpression$1$ebnf$2", "digit"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number_token$subexpression$1", "symbols": ["number_token$subexpression$1$ebnf$1", {"literal":"."}, "number_token$subexpression$1$ebnf$2"]},
    {"name": "number_token$subexpression$1$ebnf$3", "symbols": ["digit"]},
    {"name": "number_token$subexpression$1$ebnf$3", "symbols": ["number_token$subexpression$1$ebnf$3", "digit"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number_token$subexpression$1", "symbols": ["number_token$subexpression$1$ebnf$3"]},
    {"name": "number_token$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "number_token$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "number_token$ebnf$2$subexpression$1$ebnf$1", "symbols": ["number_token$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "number_token$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number_token$ebnf$2$subexpression$1$ebnf$2", "symbols": ["digit"]},
    {"name": "number_token$ebnf$2$subexpression$1$ebnf$2", "symbols": ["number_token$ebnf$2$subexpression$1$ebnf$2", "digit"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number_token$ebnf$2$subexpression$1", "symbols": [/[eE]/, "number_token$ebnf$2$subexpression$1$ebnf$1", "number_token$ebnf$2$subexpression$1$ebnf$2"]},
    {"name": "number_token$ebnf$2", "symbols": ["number_token$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "number_token$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number_token", "symbols": ["number_token$ebnf$1", "number_token$subexpression$1", "number_token$ebnf$2"]},
    {"name": "ident_token$subexpression$1$string$1", "symbols": [{"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ident_token$subexpression$1", "symbols": ["ident_token$subexpression$1$string$1"]},
    {"name": "ident_token$subexpression$1$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "ident_token$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ident_token$subexpression$1", "symbols": ["ident_token$subexpression$1$ebnf$1", "char"], "postprocess": d => (d[0] || '') + d[1]},
    {"name": "ident_token$ebnf$1", "symbols": []},
    {"name": "ident_token$ebnf$1", "symbols": ["ident_token$ebnf$1", "char"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ident_token", "symbols": ["ident_token$subexpression$1", "ident_token$ebnf$1"], "postprocess": d => d[0] + d[1].join('')},
    {"name": "hash_token$ebnf$1", "symbols": ["char"]},
    {"name": "hash_token$ebnf$1", "symbols": ["hash_token$ebnf$1", "char"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "hash_token", "symbols": [{"literal":"#"}, "hash_token$ebnf$1"], "postprocess": d => d[1].join('')},
    {"name": "char", "symbols": [/[a-zA-Z0-9_-]/], "postprocess": id},
    {"name": "char", "symbols": [/[^\x00-\x7F]/], "postprocess": id},
    {"name": "char", "symbols": ["escape"], "postprocess": id},
    {"name": "escape", "symbols": [{"literal":"\\"}, /[^0-9a-fA-F\n]/], "postprocess": id},
    {"name": "escape$ebnf$1", "symbols": ["hex_digit"], "postprocess": id},
    {"name": "escape$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "escape$ebnf$2", "symbols": ["hex_digit"], "postprocess": id},
    {"name": "escape$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "escape$ebnf$3", "symbols": ["hex_digit"], "postprocess": id},
    {"name": "escape$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "escape$ebnf$4", "symbols": ["hex_digit"], "postprocess": id},
    {"name": "escape$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "escape$ebnf$5", "symbols": ["hex_digit"], "postprocess": id},
    {"name": "escape$ebnf$5", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "escape", "symbols": [{"literal":"\\"}, "hex_digit", "escape$ebnf$1", "escape$ebnf$2", "escape$ebnf$3", "escape$ebnf$4", "escape$ebnf$5", "_"], "postprocess": d => d.slice(1).join('')},
    {"name": "hex_digit", "symbols": [/[0-9a-fA-F]/], "postprocess": id},
    {"name": "digit", "symbols": [/[0-9]/], "postprocess": id}
]
  , ParserStart: "selector_list"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
